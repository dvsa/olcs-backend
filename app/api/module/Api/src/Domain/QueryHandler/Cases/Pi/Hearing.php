<?php

namespace Dvsa\Olcs\Api\Domain\QueryHandler\Cases\Pi;

use Doctrine\ORM\Query;
use Dvsa\Olcs\Api\Domain\QueryHandler\AbstractQueryHandler;
use Dvsa\Olcs\Transfer\Query\QueryInterface;
use Dvsa\Olcs\Api\Entity\Pi\PiHearing as PiHearingEntity;
use Dvsa\Olcs\Api\Entity\System\Sla as SlaEntity;
use Zend\ServiceManager\ServiceLocatorInterface;
use Dvsa\Olcs\Api\Domain\Util\SlaCalculatorInterface;
use Dvsa\Olcs\Api\Entity\TrafficArea\TrafficArea as TrafficAreaEntity;

/**
 * Pi Hearing
 */
final class Hearing extends AbstractQueryHandler
{
    protected $repoServiceName = 'PiHearing';
    protected $extraRepos = ['Sla'];

    /**
     * Handles query, generating SLA dates in the process
     *
     * @param QueryInterface $query
     * @return \Dvsa\Olcs\Api\Domain\QueryHandler\Result
     * @throws \Dvsa\Olcs\Api\Domain\Exception\RuntimeException
     */
    public function handleQuery(QueryInterface $query)
    {
        /** @var PiHearingEntity $hearing */
        $hearing = $this->getRepo()->fetchUsingId($query);

        //we need a traffic area so we can calculate slas
        if ($hearing->getPi()->getCase()->isTm()) {
            //no licence for TM cases so using English TA
            $trafficArea = $this->getRepo()->getReference(
                TrafficAreaEntity::class,
                TrafficAreaEntity::SE_MET_TRAFFIC_AREA_CODE
            );
        } else {
            $trafficArea = $hearing->getPi()->getCase()->getLicence()->getTrafficArea();
        }

        $slas = $this->getRepo('Sla')->fetchByCategories(['pi_hearing'], Query::HYDRATE_OBJECT);

        foreach ($slas as $sla) {
            /** @var SlaEntity $sla*/
            $getMethod = 'get' . ucfirst($sla->getCompareTo());

            if ($hearing->getPi()->$getMethod() !== null) {
                $dateTime = date_create($hearing->getPi()->$getMethod());

                if ($sla->appliesTo($dateTime)) {
                    $targetDate = $this->slaService->applySla($dateTime, $sla, $trafficArea);
                    $slaValues[$sla->getField() . 'Target'] = $targetDate->format('Y-m-d');
                }
            }

            if (!isset($slaValues[$sla->getField() . 'Target'])) {
                $slaValues[$sla->getField() . 'Target'] = '';
            }
        }

        $values = array_merge(
            $slaValues,
            [
                'isTm' => $hearing->getPi()->getCase()->isTm(),
            ]
        );

        return $this->result(
            $hearing,
            [
                'venue' => [],
                'presidingTc' => [],
                'presidedByRole' => [],
                'pi' => [
                    'publicationLinks' => [
                        'publication' => [
                            'pubStatus'
                        ]
                    ]
                ],
            ],
            $values
        );
    }

    /**
     * Create service injecting SLA Service
     *
     * @param ServiceLocatorInterface $serviceLocator
     * @return $this
     */
    public function createService(ServiceLocatorInterface $serviceLocator)
    {
        parent::createService($serviceLocator); // TODO: Change the autogenerated stub
        $serviceLocator = $serviceLocator->getServiceLocator();

        $this->slaService = $serviceLocator->get(SlaCalculatorInterface::class);

        return $this;
    }
}
