<?php

namespace Dvsa\Olcs\Api\Domain\QueryHandler\Cases;

use Doctrine\ORM\Query;
use Dvsa\Olcs\Api\Domain\QueryHandler\AbstractQueryHandler;
use Dvsa\Olcs\Api\Domain\Util\SlaCalculatorInterface;
use Dvsa\Olcs\Api\Entity\System\Sla as SlaEntity;
use Dvsa\Olcs\Api\Entity\Pi\Pi as PiEntity;
use Dvsa\Olcs\Api\Entity\TrafficArea\TrafficArea as TrafficAreaEntity;
use Dvsa\Olcs\Transfer\Query\QueryInterface;
use Zend\ServiceManager\ServiceLocatorInterface;

/**
 * PI
 */
final class Pi extends AbstractQueryHandler
{
    protected $repoServiceName = 'Pi';

    protected $extraRepos = ['Licence', 'Sla'];

    protected $bundle = [
        'piStatus' => [],
        'piTypes' => [],
        'reasons' => [],
        'piHearings' => [
            'presidingTc' => [],
            'presidedByRole' => [],
            'piVenue' => []
        ],
        'writtenOutcome' => [],
        'decidedByTc' => [],
        'agreedByTc' => [],
        'decidedByTcRole' => [],
        'agreedByTcRole' => [],
        'decisions' => [],
        'assignedTo' => [],
        'case' => [],
    ];

    /**
     * @var SlaCalculatorInterface
     */
    private $slaService;

    public function handleQuery(QueryInterface $query)
    {
        /** @var PiEntity $result */
        $result = $this->getRepo()->fetchUsingCase($query, Query::HYDRATE_OBJECT);

        if ($result === null) {
            return [];
        }

        $slaValues = [];

        //we need a traffic area so we can calculate slas
        if ($result->isTm()) {
            //no licence for TM cases so using English TA
            $trafficArea = $this->getRepo()->getReference(
                TrafficAreaEntity::class,
                TrafficAreaEntity::SE_MET_TRAFFIC_AREA_CODE
            );
        } else {
            $trafficArea = $result->getCase()->getLicence()->getTrafficArea();
        }

        $slas = $this->getRepo('Sla')->fetchByCategories(['pi', 'pi_hearing'], Query::HYDRATE_OBJECT);

        foreach ($slas as $sla) {
            /** @var SlaEntity $sla*/
            $getMethod = 'get' . ucfirst($sla->getCompareTo());

            if ($result->$getMethod() !== null) {
                $dateTime = date_create($result->$getMethod());

                if ($sla->appliesTo($dateTime)) {
                    $targetDate = $this->slaService->applySla($dateTime, $sla, $trafficArea);
                    $slaValues[$sla->getField() . 'Target'] = $targetDate->format('Y-m-d');
                }
            }

            if (!isset($slaValues[$sla->getField() . 'Target'])) {
                $slaValues[$sla->getField() . 'Target'] = '';
            }
        }

        return $this->result(
            $result,
            $this->bundle,
            $slaValues
        );
    }

    public function createService(ServiceLocatorInterface $serviceLocator)
    {
        parent::createService($serviceLocator); // TODO: Change the autogenerated stub
        $serviceLocator = $serviceLocator->getServiceLocator();

        $this->slaService = $serviceLocator->get(SlaCalculatorInterface::class);

        return $this;
    }
}
