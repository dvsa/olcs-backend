<<?php /* Cheeky Hack */ ?>?php

namespace <?php echo $details['namespace']; ?>;

use Dvsa\Olcs\Api\Domain\QueryHandler\BundleSerializableInterface;
use JsonSerializable;
use Dvsa\Olcs\Api\Entity\Traits\BundleSerializableTrait;
use Dvsa\Olcs\Api\Entity\Traits\ProcessDateTrait;
use Doctrine\ORM\Mapping as ORM;
<?php if ($details['hasCollections']): ?>
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
<?php endif; ?>
<?php if ($details['softDeletable'] || $details['translatable'] || $details['blameable']): ?>
use Gedmo\Mapping\Annotation as Gedmo;
<?php endif; ?>

/**
 * <?php echo $details['name']; ?> Abstract Entity
 *
 * Auto-Generated
 *
 * @ORM\MappedSuperclass
<?php
if ($details['hasCreatedOn'] || $details['hasModifiedOn']) {
?>
 * @ORM\HasLifecycleCallbacks
<?php
}
?>
<?php if ($details['softDeletable']): ?>
 * @Gedmo\SoftDeleteable(fieldName="deletedDate", timeAware=true)
<?php endif; ?>
 * @ORM\Table(name="<?php echo $details['table']; ?>"<?php
if (!empty($details['indexes'])) {
?>
,
 *    indexes={
<?php foreach ($details['indexes'] as $key => $index): ?>
 *        @ORM\Index(<?php echo $this->generateOptionsFromAttributes($index['@attributes'], 'indexes'); ?>)<?php echo ($key < (count($details['indexes']) - 1) ? ',' : ''); ?>

<?php endforeach; ?>
 *    }<?php if (empty($details['unique-constraints'])): ?>

 * <?php endif;
}
if (!empty($details['unique-constraints'])) {
?>
,
 *    uniqueConstraints={
<?php foreach ($details['unique-constraints'] as $key => $index): ?>
 *        @ORM\UniqueConstraint(<?php echo $this->generateOptionsFromAttributes($index['@attributes'], 'unique-constraints'); ?>)<?php echo ($key < (count($details['unique-constraints']) - 1) ? ',' : ''); ?>

<?php endforeach; ?>
 *    }
 * <?php
}
?>)
 */
abstract class Abstract<?php echo $details['name']; ?> implements BundleSerializableInterface, JsonSerializable
{
    use BundleSerializableTrait;
    use ProcessDateTrait;
<?php foreach ($details['fields'] as $item): $field = $item['config']; ?>

<?php include('property.phtml'); ?>

<?php endforeach; ?>
<?php if ($details['hasCollections']): ?>

    /**
     * Initialise the collections
     *
     * @return void
     */
    public function __construct()
    {
        $this->initCollections();
    }

    /**
     * Initialise the collections
     *
     * @return void
     */
    public function initCollections()
    {
<?php foreach ($details['collections'] as $collection): ?>
        $this-><?php echo $collection['@attributes']['field']; ?>s = new ArrayCollection();
<?php endforeach; ?>
    }
<?php endif; ?>
<?php if (count($details['fields'])): ?>
<?php foreach ($details['fields'] as $item): $field = $item['config']; $fluidReturn = $className; ?>

<?php include('methods.phtml'); ?>
<?php endforeach; ?>
<?php endif;?>

<?php
if ($details['hasCreatedOn']) {
?>
    /**
     * Set the createdOn field on persist
     *
     * @ORM\PrePersist
     *
     * @return void
     */
    public function setCreatedOnBeforePersist()
    {
        $this->createdOn = new \DateTime();
    }
<?php
}
?>

<?php
if ($details['hasModifiedOn']) {
?>
    /**
     * Set the lastModifiedOn field on persist
     *
     * @ORM\PreUpdate
     *
     * @return void
     */
    public function setLastModifiedOnBeforeUpdate()
    {
        $this->lastModifiedOn = new \DateTime();
    }
<?php
}
?>

    /**
     * Clear properties
     *
     * @param array $properties array of properties
     *
     * @return void
     */
    public function clearProperties($properties = array())
    {
        foreach ($properties as $property) {

            if (property_exists($this, $property)) {
<?php if ($details['hasCollections']) { ?>
                if ($this->$property instanceof Collection) {
                    $this->$property = new ArrayCollection(array());
                } else {
                    $this->$property = null;
                }
<?php } else { ?>
                $this->$property = null;
<?php } ?>
            }
        }
    }
}
