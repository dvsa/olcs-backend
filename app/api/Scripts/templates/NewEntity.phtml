<<?php /* Cheeky Hack */ ?>?php

namespace OlcsEntities\Entity;

use Doctrine\ORM\Mapping as ORM;
<?php if (!empty($constructCollectionProperties)): ?>
use Doctrine\Common\Collections\ArrayCollection;
<?php endif; ?>
<?php if (!empty($traits)): ?>
use OlcsEntities\Entity\Traits;
<?php endif; ?>

/**
 * <?php echo $config['name']; ?> Entity
 *
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks
 * @ORM\Table(name="<?php echo $config['entity']['@attributes']['table']; ?>"<?php
if (!empty($indexes)) {
?>
,
 *    indexes={
<?php foreach ($indexes as $key => $index): ?>
 *        @ORM\Index(<?php echo $this->generateOptionsFromAttributes($index['@attributes'], 'indexes'); ?>)<?php echo ($key < (count($indexes) - 1) ? ',' : ''); ?>

<?php endforeach; ?>
 *    }
 * <?php
}
?>)
 */
class <?php echo $config['name']; ?> implements Interfaces\EntityInterface
{
<?php if(!empty($traits)): ?>
    use Traits\<?php echo implode(',
        Traits\\', $traits);
    ?>;
<?php endif; ?>
<?php foreach ($ids as $field): ?>
<?php
if (isset($field['@attributes']['association-key']) && $field['@attributes']['association-key']) {
    continue;
}
?>

    /**
     * Identifier - <?php echo $this->getReadableStringFromName($field['@attributes']['name']); ?>

     *
     * @var <?php echo $this->getPhpTypeFromType($field['@attributes']['type']); ?>

     *
     * @ORM\Id
     * @ORM\Column(<?php echo $this->generateOptionsFromAttributes($field['@attributes']); ?>)
<?php if (isset($field['generator'])): ?>
     * @ORM\GeneratedValue(strategy="<?php echo $field['generator']['@attributes']['strategy']; ?>")
<?php endif; ?>
     */
    protected $<?php echo $field['@attributes']['name']; ?>;
<?php endforeach; ?>
<?php foreach ($fields as $field): ?>

    /**
     * <?php echo $this->getReadableStringFromName($field['@attributes']['name']); ?>

     *
     * @var <?php echo $this->getPhpTypeFromType($field['@attributes']['type']); ?>

     *
<?php if (isset($ids[$field['@attributes']['name']])): ?>
     * @ORM\ID
<?php endif; ?>
     * @ORM\Column(<?php echo $this->generateOptionsFromAttributes($field['@attributes']); ?>)
     */
    protected $<?php echo $field['@attributes']['name']; ?>;
<?php endforeach; ?>
<?php foreach ($manyToOne as $field): ?>

    /**
     * <?php echo $this->getReadableStringFromName($field['@attributes']['field']); ?>

     *
     * @var \<?php echo $field['@attributes']['target-entity']; ?>

     *
<?php if (isset($ids[$field['@attributes']['field']])): ?>
     * @ORM\ID
<?php endif; ?>
     * @ORM\ManyToOne(<?php echo $this->generateOptionsFromAttributes($field['@attributes'], 'many-to-one'); ?>)
     * @ORM\JoinColumn(<?php echo $this->generateOptionsFromAttributes($field['join-columns']['join-column']['@attributes'], 'join-column'); ?>)
     */
    protected $<?php echo $field['@attributes']['field']; ?>;
<?php endforeach; ?>
<?php foreach ($manyToMany as $field): ?>

    /**
     * <?php echo $this->getReadableStringFromName($field['@attributes']['field']); ?>

     *
     * @var \Doctrine\Common\Collections\ArrayCollection
     *
<?php if (isset($ids[$field['@attributes']['field']])): ?>
     * @ORM\ID
<?php endif; ?>
     * @ORM\ManyToMany(<?php echo $this->generateOptionsFromAttributes($field['@attributes'], 'many-to-many'); ?>)
     */
    protected $<?php echo $field['@attributes']['field']; ?>s;
<?php endforeach; ?>
<?php foreach ($oneToMany as $field): ?>

    /**
     * <?php echo $this->getReadableStringFromName($field['@attributes']['field']); ?>

     *
     * @var \Doctrine\Common\Collections\ArrayCollection
     *
<?php if (isset($ids[$field['@attributes']['field']])): ?>
     * @ORM\ID
<?php endif; ?>
     * @ORM\OneToMany(<?php echo $this->generateOptionsFromAttributes($field['@attributes'], 'many-to-many'); ?>)
     */
    protected $<?php echo $field['@attributes']['field']; ?>s;
<?php endforeach; ?>
<?php foreach ($oneToOne as $field): ?>

    /**
     * <?php echo $this->getReadableStringFromName($field['@attributes']['field']); ?>

     *
     * @var \<?php echo $field['@attributes']['target-entity']; ?>

     *
<?php if (isset($ids[$field['@attributes']['field']])): ?>
     * @ORM\ID
<?php endif; ?>
     * @ORM\OneToOne(<?php echo $this->generateOptionsFromAttributes($field['@attributes'], 'one-to-one'); ?>)
     * @ORM\JoinColumn(<?php echo $this->generateOptionsFromAttributes($field['join-columns']['join-column']['@attributes'], 'join-column'); ?>)
     */
    protected $<?php echo $field['@attributes']['field']; ?>;
<?php endforeach; ?>
<?php if (!empty($constructCollectionProperties)): ?>

    /**
     * Setup any ArrayCollections
     */
    public function __construct()
    {
<?php foreach ($constructCollectionProperties as $field): ?>
        $this-><?php echo $field['@attributes']['field']; ?>s = new ArrayCollection();
<?php endforeach; ?>
    }
<?php endif; ?>
<?php foreach ($ids as $field): ?>
<?php
if (isset($field['@attributes']['association-key']) && $field['@attributes']['association-key']) {
    continue;
}
?>

    /**
     * Set the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['name'])); ?> identifier
     *
     * @param <?php echo $this->getPhpTypeFromType($field['@attributes']['type']); ?> $<?php echo $field['@attributes']['name']; ?>

     * @return \<?php echo $config['entity']['@attributes']['name']; ?>

     */
    public function set<?php echo ucfirst($field['@attributes']['name']); ?>($<?php echo $field['@attributes']['name']; ?>)
    {
        $this-><?php echo $field['@attributes']['name']; ?> = $<?php echo $field['@attributes']['name']; ?>;

        return $this;
    }

    /**
     * Get the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['name'])); ?> identifier
     *
     * @return <?php echo $this->getPhpTypeFromType($field['@attributes']['type']); ?>

     */
    public function get<?php echo ucfirst($field['@attributes']['name']); ?>()
    {
        return $this-><?php echo $field['@attributes']['name']; ?>;
    }
<?php endforeach; ?>
<?php foreach ($fields as $field): ?>

    /**
     * Set the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['name'])); ?>

     *
     * @param <?php echo $this->getPhpTypeFromType($field['@attributes']['type']); ?> $<?php echo $field['@attributes']['name']; ?>

     * @return \<?php echo $config['entity']['@attributes']['name']; ?>

     */
    public function set<?php echo ucfirst($field['@attributes']['name']); ?>($<?php echo $field['@attributes']['name']; ?>)
    {
        $this-><?php echo $field['@attributes']['name']; ?> = $<?php echo $field['@attributes']['name']; ?>;

        return $this;
    }

    /**
     * Get the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['name'])); ?>

     *
     * @return <?php echo $this->getPhpTypeFromType($field['@attributes']['type']); ?>

     */
    public function get<?php echo ucfirst($field['@attributes']['name']); ?>()
    {
        return $this-><?php echo $field['@attributes']['name']; ?>;
    }
<?php endforeach; ?>
<?php foreach ($settersAndGetters as $field): ?>

    /**
     * Set the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['field'])); ?>

     *
     * @param \<?php echo $field['@attributes']['target-entity']; ?> $<?php echo $field['@attributes']['field']; ?>

     * @return \<?php echo $config['entity']['@attributes']['name']; ?>

     */
    public function set<?php echo ucfirst($field['@attributes']['field']); ?>($<?php echo $field['@attributes']['field']; ?>)
    {
        $this-><?php echo $field['@attributes']['field']; ?> = $<?php echo $field['@attributes']['field']; ?>;

        return $this;
    }

    /**
     * Get the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['field'])); ?>

     *
     * @return \<?php echo $field['@attributes']['target-entity']; ?>

     */
    public function get<?php echo ucfirst($field['@attributes']['field']); ?>()
    {
        return $this-><?php echo $field['@attributes']['field']; ?>;
    }
<?php endforeach; ?>
<?php foreach ($collectionProperties as $field): ?>

    /**
     * Set the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['field'])); ?>

     *
     * @param \Doctrine\Common\Collections\ArrayCollection $<?php echo $field['@attributes']['field']; ?>s
     * @return \<?php echo $config['entity']['@attributes']['name']; ?>

     */
    public function set<?php echo ucfirst($field['@attributes']['field']); ?>s($<?php echo $field['@attributes']['field']; ?>s)
    {
        $this-><?php echo $field['@attributes']['field']; ?>s = $<?php echo $field['@attributes']['field']; ?>;

        return $this;
    }

    /**
     * Add a <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['field'])); ?>

     *
     * @param \<?php echo $field['@attributes']['target-entity']; ?> $<?php echo $field['@attributes']['field']; ?>

     * @return \<?php echo $config['entity']['@attributes']['name']; ?>

     */
    public function add<?php echo ucfirst($field['@attributes']['field']); ?>($<?php echo $field['@attributes']['field']; ?>)
    {
        if (!$this-><?php echo $field['@attributes']['field']; ?>->contains($<?php echo $field['@attributes']['field']; ?>)) {
            $this-><?php echo $field['@attributes']['field']; ?>->add($<?php echo $field['@attributes']['field']; ?>);
        }

        return $this;
    }

    /**
     * Remove a <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['field'])); ?>

     *
     * @param \<?php echo $field['@attributes']['target-entity']; ?> $<?php echo $field['@attributes']['field']; ?>

     * @return \<?php echo $config['entity']['@attributes']['name']; ?>

     */
    public function remove<?php echo ucfirst($field['@attributes']['field']); ?>($<?php echo $field['@attributes']['field']; ?>)
    {
        if ($this-><?php echo $field['@attributes']['field']; ?>->contains($<?php echo $field['@attributes']['field']; ?>)) {
            $this-><?php echo $field['@attributes']['field']; ?>->remove($<?php echo $field['@attributes']['field']; ?>);
        }

        return $this;
    }

    /**
     * Get the <?php echo strtolower($this->getReadableStringFromName($field['@attributes']['field'])); ?>

     *
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function get<?php echo ucfirst($field['@attributes']['field']); ?>s()
    {
        return $this-><?php echo $field['@attributes']['field']; ?>s;
    }
<?php endforeach; ?>
}
