<<?php /* Cheeky Hack */ ?>?php

namespace Olcs\Db\Entity;

use Doctrine\ORM\Mapping as ORM;
<?php if ($details['hasCollections']): ?>
use Doctrine\Common\Collections\ArrayCollection;
<?php endif; ?>
<?php if (!empty($details['traits'])): ?>
use Olcs\Db\Entity\Traits;
<?php endif; ?>
<?php if ($details['softDeletable']): ?>
use Gedmo\Mapping\Annotation as Gedmo;
<?php endif; ?>

/**
 * <?php echo $details['name']; ?> Entity
 *
 * Auto-Generated
 *
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks
<?php if ($details['softDeletable']): ?>
 * @Gedmo\SoftDeleteable(fieldName="deletedDate", timeAware=true)
<?php endif; ?>
 * @ORM\Table(name="<?php echo $details['table']; ?>"<?php
if (!empty($details['indexes'])) {
?>
,
 *    indexes={
<?php foreach ($details['indexes'] as $key => $index): ?>
 *        @ORM\Index(<?php echo $this->generateOptionsFromAttributes($index['@attributes'], 'indexes'); ?>)<?php echo ($key < (count($details['indexes']) - 1) ? ',' : ''); ?>

<?php endforeach; ?>
 *    }<?php if (empty($details['unique-constraints'])): ?>

 * <?php endif;
}
if (!empty($details['unique-constraints'])) {
?>
,
 *    uniqueConstraints={
<?php foreach ($details['unique-constraints'] as $key => $index): ?>
 *        @ORM\UniqueConstraint(<?php echo $this->generateOptionsFromAttributes($index['@attributes'], 'unique-constraints'); ?>)<?php echo ($key < (count($details['unique-constraints']) - 1) ? ',' : ''); ?>

<?php endforeach; ?>
 *    }
 * <?php
}
?>)
 */
class <?php echo $details['name']; ?> implements Interfaces\EntityInterface
{
<?php if(!empty($details['traits'])): ?>
    use Traits\<?php echo implode(',
        Traits\\', $details['traits']);
    ?>;
<?php endif; ?>
<?php foreach ($details['fields'] as $item): $field = $item['config']; ?>

<?php include('property.phtml'); ?>

<?php endforeach; ?>
<?php if ($details['hasCollections']): ?>

    /**
     * Initialise the collections
     */
    public function __construct()
    {
<?php foreach ($details['collections'] as $collection): ?>
        $this-><?php echo $collection['@attributes']['field']; ?>s = new ArrayCollection();
<?php endforeach; ?>
    }
<?php endif; ?>

    /**
     * Get identifier(s)
     *
     * @return mixed
     */
    public function getIdentifier()
    {
<?php if (empty($details['ids'])):?>
        return null;
<?php elseif (count($details['ids']) == 1): ?>
        return $this->get<?php echo ucfirst($details['ids'][0]); ?>();
<?php else: ?>
        return array(
<?php foreach ($details['ids'] as $id): ?>
            '<?php echo $id; ?>' => $this->get<?php echo ucfirst($id); ?>(),
<?php endforeach; ?>
        );
<?php endif; ?>
    }
<?php foreach ($details['fields'] as $item): $field = $item['config']; $fluidReturn = $className; ?>

<?php include('methods.phtml'); ?>

<?php endforeach; ?>
}
