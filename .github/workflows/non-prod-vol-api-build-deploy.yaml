name: CI/CD NON PROD VOL API
run-name: CI/CD NON PROD VOL API

on:
  push:
    branches:
      - master

env:
  AWS_REGION : ${{ vars.DVSA_AWS_REGION }}
  VOL_NONPROD_TOOLING_REPO_URL: ${{ secrets.VOL_NONPROD_TOOLING_ECR_REPO_URL }}
  AWS_ACCOUNT_ID_SHAREDCOREECR: ${{ vars.AWS_ACCOUNT_ID_SHAREDCOREECR }}

# Permission can be added at job level or workflow level    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:

  build:

    name: Build VOL API
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the repository to this runner
      uses: actions/checkout@v3

    - name: Build VOL API artifact
      uses: dvsa/olcs-backend/.github/actions/build-vol-api@feature/AWSRESET1-514

  unit-tests:

    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the repository to this runner
      uses: actions/checkout@v3

    - name: Run unit tests
      run: |
       echo 'Run unit tests'
       ls -la ./

  build-test-push-sign-image:

    name: Build, Push & Sign Image
    runs-on: ubuntu-latest
    needs:
    - build
    - unit-tests

    steps:

    - name: Checkout the repository to this runner
      uses: actions/checkout@v3

    - name: Download VOL API artifact
      uses: actions/download-artifact@v3.0.2
      with:
        name: VOL_API_Artifact
        path: ./

    - name: Set BASE_IMAGE & VOL_API_IMAGE_TAG
      run: |
        envsubst < dockerfile | tee dockerfile.tmp
        mv dockerfile.tmp dockerfile
        BASE_IMAGE=$(head -n1 dockerfile)
        echo "BASE_IMAGE=${BASE_IMAGE#* }" >> $GITHUB_ENV
        echo "VOL_API_IMAGE_TAG=approved-vol-api-${BASE_IMAGE#*:}-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    # - name: Setup Notation CLI
    #   uses: notaryproject/notation-action/setup@v1
    #   with:
    #     version: 1.0.0

    # - name: Set up Notation AWS Signer plugin
    #   run: |
    #     wget https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/deb/latest/aws-signer-notation-cli_amd64.deb
    #     sudo dpkg -i aws-signer-notation-cli_amd64.deb
    #     notation version
    #     notation plugin ls

    - name: Configure AWS credentials on Shared Core ECR
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        role-to-assume: ${{ secrets.DVSA_AWS_ROLE_SHAREDCORECR }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ vars.DVSA_AWS_REGION }}

    - name: Login to Shared Core ECR
      id: login-ecr-sharedcoreecr
      uses: aws-actions/amazon-ecr-login@v2.0.1

    - name: Verify base image
      uses: dvsa/olcs-backend/.github/actions/image-integrity@feature/AWSRESET1-514
      with:
        ecr_tagged_image: $BASE_IMAGE
        image_sign_inspect: 'true'

    - name: Build VOL API image
      run: |
        # notation inspect $BASE_IMAGE
        docker build -t ${VOL_NONPROD_TOOLING_REPO_URL}:${VOL_API_IMAGE_TAG} \
          --build-arg DVSA_AWS_SHAREDCOREECR_ID=${{secrets.DVSA_AWS_SHAREDCOREECR_ID}} .

    - name: Snyk scan VOL API image
      id: scan-api-image
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${VOL_NONPROD_TOOLING_REPO_URL}:${VOL_API_IMAGE_TAG}
        args: --file=dockerfile --severity-threshold=critical
      continue-on-error: true

    - name: Configure AWS credentials on Non Production VOL ECR
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        role-to-assume: ${{ secrets.VOL_AWS_ROLE_TOOLING_NONPROD }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ vars.DVSA_AWS_REGION}}

    - name: Login to Non Production VOL ECR
      id: login-ecr-vol-tooling-non-prod
      uses: aws-actions/amazon-ecr-login@v2.0.1

    - name: Push VOL API image
      # if: github.ref == 'refs/heads/master'
      id: push-image
      run: |
        echo "image_tag=${VOL_API_IMAGE_TAG}" >> $GITHUB_OUTPUT
        docker push ${VOL_NONPROD_TOOLING_REPO_URL}:${VOL_API_IMAGE_TAG}

    - name: Sign VOL API image
      uses: dvsa/olcs-backend/.github/actions/image-integrity@feature/AWSRESET1-514
      with:
        aws_signer_profile_arn: ${{ secrets.DVSA_AWS_NONPRODVOLTOOLING_IMAGE_SIGNING_PROFILE }}
        ecr_tagged_image: ${VOL_NONPROD_TOOLING_REPO_URL}:${VOL_API_IMAGE_TAG}
        image_sign_inspect: 'true'

    # - name: Sign VOL API image
      # # if: github.ref == 'refs/heads/master'
      # run: |
      #   notation sign ${VOL_NONPROD_TOOLING_REPO_URL}:${VOL_API_IMAGE_TAG} \
      #     --plugin "com.amazonaws.signer.notation.plugin" --id "${{ secrets.DVSA_AWS_NONPRODVOLTOOLING_IMAGE_SIGNING_PROFILE }}"

    outputs:
      image_tag: ${{ steps.push-image.outputs.image_tag }}

  deploy-on-non-prod-cluster:

    name: Deploy on Non Prod Cluster
    # if: github.ref == 'refs/heads/master'

    needs:
    -  build-test-push-sign-image

    runs-on: ubuntu-latest

    steps:

    - name: Deploy
      run: |
       echo 'Deploy on Non Prod'

    # uses: ./.github/workflows/trigger-github-workflow.yaml
    # with:
    #   branch: 'feature/AWSRESET1-514'
    #   git_repository: 'dvsa/dvsa-container-registry'
    #   workflow_name: 'CD NON PROD VOL API'
    #   input_arguments: 'vol_api_image_tag=${{ needs.build-test-push-sign-image.outputs.image_tag }}'
    # secrets:
    #   gh_token: ${{ secrets.DVSA_VOL_TERRAFORM_ACCESS_TOKEN }}

  automation-tests:

    name: Run Automation Tests
    # if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    needs:
    - deploy-on-non-prod-cluster

    steps:

    - name: Run automation tests
      run: |
       echo 'Run automation tests'

  build-nonprod-approved-image:

    name: Build Non PROD Approved Image
    # if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    needs:
    - build-test-push-sign-image
    - deploy-on-non-prod-cluster
    - automation-tests

    steps:

    - name: VOL_API_IMAGE_TAG & NONPROD_VOL_API_IMAGE_TAG
      run: |
        echo "VOL_API_IMAGE_TAG=${{ needs.build-test-push-sign-image.outputs.image_tag }}" >> $GITHUB_ENV
        echo "NONPROD_VOL_API_IMAGE_TAG=nonprod-${{ needs.build-test-push-sign-image.outputs.image_tag }}" >> $GITHUB_ENV

    - name: Configure AWS credentials on Non Production VOL ECR
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        role-to-assume: ${{ secrets.VOL_AWS_ROLE_TOOLING_NONPROD }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ vars.DVSA_AWS_REGION}}

    - name: Login to Non Production VOL ECR
      id: login-ecr-vol-tooling-non-prod
      uses: aws-actions/amazon-ecr-login@v2.0.1

    - name: Push VOL API image
      if: github.ref == 'refs/heads/master'
      id: push-approved-image
      run: |
        echo "approved_image_tag=${NONPROD_VOL_API_IMAGE_TAG}" >> $GITHUB_OUTPUT
        docker pull ${VOL_NONPROD_TOOLING_REPO_URL}:${VOL_API_IMAGE_TAG}
        docker tag ${VOL_NONPROD_TOOLING_REPO_URL}:${VOL_API_IMAGE_TAG} ${VOL_NONPROD_TOOLING_REPO_URL}:${NONPROD_VOL_API_IMAGE_TAG}
        docker push ${VOL_NONPROD_TOOLING_REPO_URL}:${NONPROD_VOL_API_IMAGE_TAG}

    outputs:
      approved_image_tag: ${{ steps.push-approved-image.outputs.approved_image_tag }}

  # qa-approval:

  #   name: QA VOL API Image Approval
  #   if: github.ref == 'refs/heads/master'

  #   needs:
  #   -  build-nonprod-approved-image

  #   uses: ./.github/workflows/trigger-github-workflow.yaml
  #   with:
  #     branch: 'feature/AWSRESET1-514'
  #     git_repository: 'dvsa/olcs-backend'
  #     workflow_name: 'CD QA VOL API'
  #     input_arguments: 'vol_api_image_tag=${{ needs.build-nonprod-approved-image.outputs.approved_image_tag }}'
  #   secrets:
  #     gh_token: ${{ secrets.DVSA_VOL_TERRAFORM_ACCESS_TOKEN }}
